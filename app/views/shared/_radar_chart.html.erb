<div class='reader-chart'>
<canvas id=<%=model.object_id%>></canvas>
<script>
// グローバル変数にモデルデータを格納する
var modeldata = modeljson_parse('<%=model%>');
/** 
 * モデルをJSON.parseする
 */
function modeljson_parse(scores) {
    scores = JSON.stringify(scores);
    scores = scores.substr(1, (scores.length - 2));
    scores = unEscapeHtml(scores);
    scores = JSON.parse(scores);
    return scores;
}
// アンエスケープ処理
function unEscapeHtml(str) {
    str = str.replace(/(&gt;)/g, '>');
    str = str.replace(/(&lt;)/g, '<');
    str = str.replace(/(&#092;)/g, '\\');
    str = str.replace(/(&quot;)/g, '"');
    str = str.replace(/(&#39;)/g, "'");
    str = str.replace(/(&amp;)/g, '&');
    return str
}

// 合計の設定
var sum_data = []
// 区分
var labels = []

modeldata.forEach((elem, index) => {
    sum_data.push(elem.sum);
    labels.push(elem.division.text);
});

var ctx = document.getElementById('<%= model.object_id %>');
var myChart = new Chart(ctx, {
  type: 'radar',
  data: {
    labels: labels,
    datasets: [{
      label: '診断結果',
      backgroundColor: "rgba(0,0,200,0.4)",
      borderColor: "rgba(0,0,200,1)",
      data:  sum_data //合計の配列設定
    },{
      label: '評価基準',
      backgroundColor: "rgba(0,0,0,0.0)",
      borderColor: "rgba(255,0,0,1)",
      data:  [15,15,15,15,15,15] //合計の配列設定
    }]
  },
  options: {
    title: {
      fullWidth: true,
      display: true,
      text: '賢者スケール'
    },
    scale:{
      ticks:{
        suggestedMin: 4,
        suggestedMax: 20,
        stepsize: 4,
        callback: function(value, index, values){
          return value + '点'
        }
      }
    }
  }
});
</script>
</div>