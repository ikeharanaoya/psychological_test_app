<div>
<canvas id=<%=model.object_id%>></canvas>
<script>
// グローバル変数にモデルデータを格納する
var modeldata = modeljson_parse('<%=model%>');
/** 
 * モデルをJSON.parseする
 */
function modeljson_parse(scores) {
    scores = JSON.stringify(scores);
    scores = scores.substr(1, (scores.length - 2));
    scores = unEscapeHtml(scores);
    scores = JSON.parse(scores);
    return scores;
}
// アンエスケープ処理
function unEscapeHtml(str) {
    str = str.replace(/(&gt;)/g, '>');
    str = str.replace(/(&lt;)/g, '<');
    str = str.replace(/(&#092;)/g, '\\');
    str = str.replace(/(&quot;)/g, '"');
    str = str.replace(/(&#39;)/g, "'");
    str = str.replace(/(&amp;)/g, '&');
    return str
}

// 合計の設定
var sum_data = Array(10)
// 中身の初期化
sum_data.fill("")
// 区分
var labels = Array(10)
// 中身の初期化
labels.fill("")

var count = 0

for (let key in modeldata) {
  sum_data[count] = modeldata[key];
  labels[count] = `${key}回目`;
  count++;
}

var ctx = document.getElementById('<%= model.object_id %>');
var myChart = new Chart(ctx, {
  type: 'bar',
  data: {
    labels: labels,
    datasets: [{
      label: '賢者スケール',
      data: sum_data,
      backgroundColor: "rgba(0,0,200,0.4)",
      borderColor: "rgba(0,0,200,1)",
      borderWidth: 1
    }]
  },
  options: {
    scales: {
        yAxes: [{
            ticks: {
                max: 120,
                beginAtZero:true
            },
        }]
    }
  }
});
</script>
</div>